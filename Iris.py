# -*- coding: utf-8 -*-
"""Iris_DecisionTree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sJ1BEKCgDH28WFAdt-ThmBDZTEDFbHcA
"""

import streamlit as st
import numpy as np
import pickle

# Load the model
with open('Decision_Tree_classifier.pkl', 'rb') as f:
    model = pickle.load(f)

# Streamlit UI
st.title("Iris Species Classification Web App")
st.write("üîç This app uses a Decision Tree Classifier model to predict Iris species.")

SepalLengthCm=st.number_input("SepalLengthCm",min_value=4.0 ,max_value=8.0)
SepalWidthCm=st.number_input("SepalWidthCm",min_value= 1.0 ,max_value=4.0)
PetalLengthCm=st.number_input("PetalLengthCm",min_value= 1.0,max_value=7.0)
PetalWidthCm=st.number_input("PetalWidthCm",min_value= 0.0,max_value=3.0)

# Button to predict
if st.button("Predict Iris Species"):
    input_data = np.array([[
        SepalLengthCm,
        SepalWidthCm,
        PetalLengthCm,
        PetalWidthCm
    ]])

    #Prediction
    prediction = model.predict(input_data)[0]
    if prediction == 0:
      st.success("üü¢ Predicted Iris Class: Setosa")
    elif prediction == 1:
      st.success("üü¢ Predicted Iris Class: Versicolor")
    else:
      st.success("üü¢ Predicted Iris Class: Virginica")

#Seperating the input and output features

X=df.drop('Species',axis=1)
y=df['Species']

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=45)

# Creating a Decision Tree Classifier
clf = DecisionTreeClassifier()

# Fitting the model
clf.fit(X_train, y_train)

# Taking predictions from the model
y_pred = clf.predict(X_test)
y_train_pred = clf.predict(X_train)

# Model Evaluation on training data
print('Training Accuracy :', np.round(metrics.accuracy_score(y_train, y_train_pred), 2))
print('Training Precision :', np.round(metrics.precision_score(y_train, y_train_pred, average = 'weighted'), 2))
print('Training Recall :', np.round(metrics.recall_score(y_train, y_train_pred, average = 'weighted'), 2))
print('Training F1 Score :', np.round(metrics.f1_score(y_train, y_train_pred, average = 'weighted'), 2))

# Model Evaluation on testing data
print('\nTesting Accuracy :', np.round(metrics.accuracy_score(y_test, y_pred), 2))
print('Testing Precision :', np.round(metrics.precision_score(y_test, y_pred, average = 'weighted'), 2))
print('Testing Recall :', np.round(metrics.recall_score(y_test, y_pred, average = 'weighted'), 2))
print('Testing F1 Score :', np.round(metrics.f1_score(y_test, y_pred, average = 'weighted'), 2))

# Save the model (DecisionTreeClassifier())
with open('Decision_Tree_classifier.pkl', 'wb') as file:
    pickle.dump(clf, file)

# Model Evaluation on training data
print('Training Accuracy :', np.round(metrics.accuracy_score(y_train, y_train_pred), 2))
print('Training Precision :', np.round(metrics.precision_score(y_train, y_train_pred, average = 'weighted'), 2))
print('Training Recall :', np.round(metrics.recall_score(y_train, y_train_pred, average = 'weighted'), 2))
print('Training F1 Score :', np.round(metrics.f1_score(y_train, y_train_pred, average = 'weighted'), 2))

# Model Evaluation on testing data
print('\nTesting Accuracy :', np.round(metrics.accuracy_score(y_test, y_pred), 2))
print('Testing Precision :', np.round(metrics.precision_score(y_test, y_pred, average = 'weighted'), 2))
print('Testing Recall :', np.round(metrics.recall_score(y_test, y_pred, average = 'weighted'), 2))
print('Testing F1 Score :', np.round(metrics.f1_score(y_test, y_pred, average = 'weighted'), 2))