# -*- coding: utf-8 -*-
"""Iris.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QsEzxd0PG4dGXmYSOv0NZT8F70Ubgjxg
"""

import streamlit as st
import numpy as np
import pickle

# Load the model
with open('Decision_Tree_classifier.pkl', 'rb') as f:
    model = pickle.load(f)

# Streamlit UI
st.title("Iris Species Classification Web App")
st.write("üîç This app uses a Decision Tree Classifier model to predict Iris species.")

SepalLengthCm = st.number_input("SepalLengthCm", min_value=4.0, max_value=8.0)
SepalWidthCm = st.number_input("SepalWidthCm", min_value=1.0, max_value=4.0)
PetalLengthCm = st.number_input("PetalLengthCm", min_value=1.0, max_value=7.0)
PetalWidthCm = st.number_input("PetalWidthCm", min_value=0.0, max_value=3.0)

# Button to predict
if st.button("Predict Iris Species"):
    # Check for missing values
    if np.isnan(SepalLengthCm) or np.isnan(SepalWidthCm) or \
       np.isnan(PetalLengthCm) or np.isnan(PetalWidthCm):
        st.warning("‚ö†Ô∏è Please provide values for all features.")
    else:
        # Create input data and reshape
        input_data = np.array([
            SepalLengthCm,
            SepalWidthCm,
            PetalLengthCm,
            PetalWidthCm
        ]).reshape(1, -1)

        # Prediction
        prediction = model.predict(input_data)[0]

        # Display prediction
        if prediction == 0:
            st.success("üü¢ Predicted Iris Class: Setosa")
        elif prediction == 1:
            st.success("üü¢ Predicted Iris Class: Versicolor")
        elif prediction == 2:
            st.success("üü¢ Predicted Iris Class: Virginica")
        else:
            st.warning("‚ö†Ô∏è Unexpected prediction value. Please check the model.")